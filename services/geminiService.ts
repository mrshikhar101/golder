import { GoogleGenAI, Modality } from "@google/genai";

// Ensure the API key is available from environment variables
if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const callGemini = async (
  model: string,
  contents: { parts: ({ text: string } | { inlineData: { data: string; mimeType: string; } })[] },
  config?: { responseModalities: Modality[] }
): Promise<string> => {
  try {
    const response = await ai.models.generateContent({ model, contents, config });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        return part.inlineData.data;
      }
    }

    throw new Error('No image was generated by the model. The model may have refused the request.');

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error) {
      throw new Error(`Gemini API Error: ${error.message}`);
    }
    throw new Error("An unexpected error occurred while communicating with the Gemini API.");
  }
};


export const editImageWithGemini = async (
  base64ImageData: string,
  mimeType: string,
  prompt: string
): Promise<string> => {
  return callGemini(
    'gemini-2.5-flash-image-preview',
    {
      parts: [
        {
          inlineData: {
            data: base64ImageData,
            mimeType: mimeType,
          },
        },
        {
          text: prompt,
        },
      ],
    },
    {
      responseModalities: [Modality.IMAGE, Modality.TEXT],
    }
  );
};

export const upscaleImageWithGemini = async (
  base64ImageData: string
): Promise<string> => {
  return callGemini(
    'gemini-2.5-flash-image-preview',
    {
      parts: [
        {
          inlineData: {
            data: base64ImageData,
            mimeType: 'image/png', // Generated images are PNGs
          },
        },
        {
          text: 'Upscale this image to a higher resolution, enhancing details and clarity. Do not change the content or style.',
        },
      ],
    },
    {
      responseModalities: [Modality.IMAGE, Modality.TEXT],
    }
  );
};

export const generateImageWithGemini = async (
  prompt: string,
  aspectRatio: '1:1' | '4:3' | '3:4' | '16:9' | '9:16'
): Promise<string> => {
  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: aspectRatio,
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      return response.generatedImages[0].image.imageBytes;
    }

    throw new Error('No image was generated by the model.');
  } catch (error) {
    console.error("Error calling Gemini API for image generation:", error);
    if (error instanceof Error) {
      throw new Error(`Gemini API Error: ${error.message}`);
    }
    throw new Error("An unexpected error occurred while communicating with the Gemini API.");
  }
};